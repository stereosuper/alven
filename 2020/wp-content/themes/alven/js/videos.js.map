{"version":3,"sources":["webpack:///./wp-content/themes/alven/src/js/components/videos.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA4B;AACA;AACc;;AAE1C;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,QAAQ,yCAAI,cAAc,oCAAoC;AAC9D;;AAEA;AACA;AACA,QAAQ,yCAAI;AACZ;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAI,sBAAsB,mBAAmB;AAC7D;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,8CAAK;;AAEb;AACA,QAAQ,+DAAO;AACf;AACA;;AAEA;AACA;AACA,YAAY,yCAAI;;AAEhB;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,QAAQ,yCAAI;AACZ;AACA;AACA;AACA;AACA,gBAAgB,yCAAI,cAAc,OAAO;AACzC;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,YAAY,yCAAI;;AAEhB;;AAEA;AACA;AACA,QAAQ,yCAAI,cAAc,aAAa;;AAEvC;AACA;;AAEA;AACA,QAAQ,yCAAI;AACZ;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,YAAY,yCAAI;;AAEhB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,+DAAO;AACX,IAAI,+DAAO;AACX,IAAI,+DAAO;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEe,qEAAM,EAAC","file":"videos.js","sourcesContent":["import { gsap } from 'gsap';\nimport vimeo from './vimeo';\nimport { forEach } from '@stereorepo/sac';\n\nconst videos = () => {\n    const wrapper = document.getElementById('videos');\n    const slider = document.getElementById('videos-slider');\n\n    if (!wrapper || !slider) return;\n\n    let slides = slider.querySelectorAll('.slide-video');\n    let slideW = slides[0].offsetWidth;\n    const lastSlideIndex = slides.length - 1;\n    const lastSlide = slides[lastSlideIndex];\n\n    const sliderText = wrapper.querySelector('#video-text');\n    const nexts = wrapper.querySelectorAll('.js-video-next');\n    const prevs = wrapper.querySelectorAll('.js-video-prev');\n    const btns = wrapper.querySelectorAll('.js-video-nav');\n\n    // center slider\n    const setInitialPos = () => {\n        const wWidth = window.innerWidth;\n        let ratio = 0.5;\n\n        if (wWidth < 768) {\n            ratio = 1;\n        } else if (wWidth < 1264) {\n            ratio = 0.825;\n        }\n\n        gsap.set(slider, { left: -slideW * ratio, opacity: 1 });\n    };\n\n    // update text\n    const updateText = () =>\n        gsap.to(sliderText, 0.3, {\n            opacity: 0,\n            y: 20,\n            onComplete: () => {\n                sliderText.innerHTML = '';\n                sliderText.appendChild(slider.querySelector('.on').querySelector('.js-video-text').cloneNode(true));\n                gsap.to(sliderText, 0.3, { opacity: 1, y: 0 });\n            }\n        });\n\n    // set active slide\n    const setActiveSlide = newSlide => {\n        // set active slide\n        slides[1].classList.remove('on');\n        slides[newSlide].classList.add('on');\n\n        // set player\n        vimeo.addPlayer(slides[newSlide].querySelector('.js-vimeo'));\n\n        // set active nav btn\n        forEach(btns, btn => btn.classList.remove('on'));\n        wrapper.querySelector('[data-slide=\"' + (slides[newSlide].dataset.index | 0) + '\"]').classList.add('on');\n    };\n\n    // slide next\n    const slideNext = noTransition => {\n        if (gsap.isTweening(slider)) return;\n\n        const dur = noTransition === true ? 0 : 0.3;\n\n        slides = slider.querySelectorAll('.slide-video');\n\n        // clone first slide and add it at the end\n        slider.appendChild(slides[0].cloneNode(true));\n\n        // set active slide\n        setActiveSlide(2);\n\n        // slide\n        gsap.to(slider, dur, {\n            x: -slideW,\n            // once slider has slided, remove first slide and put slider at the right place\n            onComplete: () => {\n                slider.removeChild(slides[0]);\n                gsap.set(slider, { x: 0 });\n            }\n        });\n\n        if (noTransition !== true) updateText();\n    };\n\n    // slide prev\n    const slidePrev = () => {\n        if (gsap.isTweening(slider)) return;\n\n        slides = slider.querySelectorAll('.slide-video');\n\n        // clone last slide, add it at the beginning and put slider at the right place\n        slider.insertBefore(slides[lastSlideIndex].cloneNode(true), slides[0]);\n        gsap.set(slider, { x: -slideW });\n\n        // set active slide\n        setActiveSlide(0);\n\n        // slide\n        gsap.to(slider, 0.3, {\n            x: 0,\n            // once slider has slided, remove last slide\n            onComplete: () => slider.removeChild(slides[lastSlideIndex])\n        });\n\n        updateText();\n    };\n\n    // slide\n    const slide = slide => {\n        if (gsap.isTweening(slider)) return;\n\n        const nbSlide = slide | 0;\n\n        slides = slider.querySelectorAll('.slide-video');\n\n        // get index of the next slide to display\n        const nextSlide = [].slice.call(slides).indexOf(slider.querySelector('[data-index=\"' + nbSlide + '\"]'));\n        // get index of the current active slide\n        const currentSlide = [].slice.call(slides).indexOf(slider.querySelector('.on'));\n        // get the difference between those indexes to know how many times to slide next\n        const nbSlidesToMove = nextSlide === 0 ? slides.length - currentSlide : nextSlide - currentSlide;\n\n        let i = 0;\n        for (i; i < nbSlidesToMove; i++) {\n            slideNext(i < nbSlidesToMove - 1);\n        }\n    };\n\n    // center slider and then make it appear\n    slider.insertBefore(lastSlide.cloneNode(true), slides[0]);\n    slider.removeChild(lastSlide);\n    btns[0].classList.add('on');\n    setInitialPos();\n    updateText();\n\n    // add events\n    forEach(nexts, next => next.addEventListener('click', slideNext, false));\n    forEach(prevs, prev => prev.addEventListener('click', slidePrev, false));\n    forEach(btns, btn => btn.addEventListener('click', () => slide(btn.dataset.slide), false));\n\n    // resize\n    window.$stereorepo.superWindow.initializeWindow();\n    window.$stereorepo.superWindow.addResizeFunction(() => {\n        slides = slider.querySelectorAll('.slide-video');\n        slideW = slides[0].offsetWidth;\n        setInitialPos();\n    });\n};\n\nexport default videos;\n"],"sourceRoot":""}